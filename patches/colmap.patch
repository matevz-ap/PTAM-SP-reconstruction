diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5ffda4d3..f2f137f3 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -36,6 +36,8 @@ project(COLMAP)
 set(COLMAP_VERSION "3.5")
 set(COLMAP_VERSION_NUMBER "3500")
 
+set(CMAKE_CXX_STANDARD 14)
+set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} --std c++14")
 
 ################################################################################
 # Include CMake dependencies
@@ -108,6 +110,7 @@ find_package(CGAL QUIET)
 
 set(CUDA_MIN_VERSION "7.0")
 if(CUDA_ENABLED)
+    set(CUDA_TOOLKIT_ROOT_DIR "/usr/local/cuda")
     find_package(CUDA ${CUDA_MIN_VERSION} QUIET)
 endif()
 
@@ -395,7 +398,7 @@ install(DIRECTORY src/
         FILES_MATCHING PATTERN "*.h")
 install(DIRECTORY lib/
         DESTINATION include/colmap/lib
-        FILES_MATCHING PATTERN "*.h")
+        FILES_MATCHING REGEX ".*[.]h|.*[.]hpp|.*[.]inl")
 
 # Generate and install CMake configuration.
 configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake/CMakeConfig.cmake.in"
diff --git a/lib/PoissonRecon/Geometry.h b/lib/PoissonRecon/Geometry.h
index 0d73eda3..2a819c96 100755
--- a/lib/PoissonRecon/Geometry.h
+++ b/lib/PoissonRecon/Geometry.h
@@ -33,6 +33,7 @@ DAMAGE.
 #include <vector>
 #include <stdlib.h>
 #include "Hash.h"
+#include <cstdio>
 
 template<class Real>
 Real Random(void);
diff --git a/lib/VLFeat/kmeans.c b/lib/VLFeat/kmeans.c
index c250ca89..be968886 100755
--- a/lib/VLFeat/kmeans.c
+++ b/lib/VLFeat/kmeans.c
@@ -669,7 +669,7 @@ VL_XCAT(_vl_kmeans_quantize_, SFX)
 #endif
 
 #ifdef _OPENMP
-#pragma omp parallel default(none) \
+#pragma omp parallel \
             shared(self, distances, assignments, numData, distFn, data) \
             num_threads(vl_get_max_threads())
 #endif
@@ -726,7 +726,7 @@ VL_XCAT(_vl_kmeans_quantize_ann_, SFX)
   vl_kdforest_build(forest,self->numCenters,self->centers);
 
 #ifdef _OPENMP
-#pragma omp parallel default(none) \
+#pragma omp parallel \
   num_threads(vl_get_max_threads()) \
   shared(self, forest, update, assignments, distances, data, numData, distFn)
 #endif
@@ -1489,7 +1489,6 @@ VL_XCAT(_vl_kmeans_refine_centers_elkan_, SFX)
 
 #if defined(_OPENMP)
 #pragma omp parallel for \
-            default(none) \
             shared(self,numData, \
               pointToClosestCenterUB,pointToCenterLB, \
               nextCenterDistances,pointToClosestCenterUBIsStrict, \
diff --git a/src/util/alignment.h b/src/util/alignment.h
index f2c8485c..7074e9cb 100644
--- a/src/util/alignment.h
+++ b/src/util/alignment.h
@@ -79,19 +79,19 @@
   };                                                                       \
   }  // namespace std
 
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Vector2d)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Vector4d)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Vector4f)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix2d)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix2f)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix4d)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix4f)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Affine3d)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Affine3f)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Quaterniond)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Quaternionf)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix<float, 3, 4>)
-EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix<double, 3, 4>)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Vector2d)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Vector4d)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Vector4f)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix2d)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix2f)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix4d)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix4f)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Affine3d)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Affine3f)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Quaterniond)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Quaternionf)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix<float, 3, 4>)
+// EIGEN_DEFINE_STL_VECTOR_SPECIALIZATION_CUSTOM(Eigen::Matrix<double, 3, 4>)
 
 #define EIGEN_STL_UMAP(KEY, VALUE)                                   \
   std::unordered_map<KEY, VALUE, std::hash<KEY>, std::equal_to<KEY>, \
diff --git a/src/util/types.h b/src/util/types.h
index 64c95545..73823b4f 100755
--- a/src/util/types.h
+++ b/src/util/types.h
@@ -104,6 +104,7 @@ const point3D_t kInvalidPoint3DId = std::numeric_limits<point3D_t>::max();
 
 // This file provides specializations of the templated hash function for
 // custom types. These are used for comparison in unordered sets/maps.
+#ifndef COLMAP_DONT_SPECIALIZE_HASH
 namespace std {
 
 // Hash function specialization for uint32_t pairs, e.g., image_t or camera_t.
@@ -117,5 +118,5 @@ struct hash<std::pair<uint32_t, uint32_t>> {
 };
 
 }  // namespace std
-
+#endif  // COLMAP_DONT_SPECIALIZE_HASH
 #endif  // COLMAP_SRC_UTIL_TYPES_H_
